%{

#define YYSTYPE struct node*
#define LCURLY "{"
#define RCURLY "}"
#define YY_INPUT(buf, result, max_size, D) yy_input_func(buf, &result, max_size, D)

void yy_input_func(char *buf, int *result, int max_size, struct greg_data *data)
{
	if (data->input && *data->input != '\0') {
		*buf = *data->input;
		data->input++;
		*result = 1;
	}
	else {
		*result = 0;
	}
}

%}

Start		= e0:Expr EOF	{ ((struct greg_data*) G->data)->result->text = e0->text; }
		| < .+ > EOF	{ ((struct greg_data*) G->data)->result->text = merror(yytext); }

Const		= < NUMBER >		{ $$ = mk_number(yytext); }
		| Operator
		| < STANDARD >		{ $$ = mk_op(yytext); }
		| < GREEK >		{ $$ = mk_greek(yytext); }
		| < SPECIAL >		{ $$ = mk_identifier(yytext); }
		| < IDENTIFIER >	{ $$ = mk_identifier(yytext); }

Operator	= Arrow
		| Logic
		| Misc
		| Relation
		| Unders
		| Operation

Unary		= "sqrt" - s:Simple	{ msqrt(s); }
		| "text" - s:Simple	{ mtext(s); }
		| "ul" - s:Simple	{ ul(s); }
		| "cancel" - s:Simple	{ cancel(s); }
		| a:Accent - s:Simple	{ accent(s, a->text); }
		| Font

Binary		= Fraction
		| Root
		| Color
		| Stackrel
		| Ubrace
		| Obrace

Text		= ["] < (!["] .)* > ["]	{ $$ = mk_node(NODE_TEXT, yytext); mtext($$); }

Simple		= Matrix
		| Group
		| Binary
		| Unary
		| Text
		| Const

Intermediate	= Division
		| Underover
		| Under
		| Subsup
		| Sub
		| Super
		| Simple

IntermediateE	= Intermediate
		| < !EOF . >					{ $$ = mk_op(yytext); }

Expr		= - c0:IntermediateE - e0:Expr -	{ $$ = mk_concat(c0, e0); }
		| - c0:IntermediateE - 			{ $$ = c0; }

IntermediateG	= !">>" Intermediate
		| < !":}" !":)" !">>" !')' !']' !'}' . >	{ $$ = mk_op(yytext); }

ExprG		= - c0:IntermediateG - e0:ExprG -	{ $$ = mk_concat(c0, e0); }
		| - c0:IntermediateG - 			{ $$ = c0; }

Group 		= l:Left - e:ExprG - r:Right	{ $$ = mk_group(l->text, e->text, r->text); }

IntermediateM	= !">>" Intermediate
		| < !":}" !":)" !">>" !')' !']' !'}' !',' . >	{ $$ = mk_op(yytext); }

ExprM		= - c0:IntermediateM - e0:ExprM -	{ $$ = mk_concat(c0, e0); }
		| - c0:IntermediateM - 			{ $$ = c0; }

ColorGroup 	= l:Left - < (IDENTIFIER | NUMBER | '#')* > - r:Right	{ $$ = mk_node(NODE_GROUP, yytext); }

Matrix		= l:Left - r0:Row -	{ row(r0, r0->text); }
			("," - ri:Row -	{ row(ri, ri->text); r0 = mk_concat(r0, ri); }
			)+ - r:Right	{ matrix(r0, l->text, r0->text, r->text); $$ = r0; }

Row		= l:Left - s0:ExprM -		{ cell(s0, s0->text); }
			("," - si:ExprM -	{ cell(si, si->text); s0 = mk_concat(s0, si); }
			)* - r:Right		{ $$ = s0; }

Fraction	= "frac" - s0:Simple - s1:Simple		{ $$ = mk_fraction(s0, s1); }
Root		= "root" - s0:Simple - s1:Simple		{ $$ = mk_root(s1, s0); }
Stackrel	= "stackrel" - s0:Simple - s1:Simple		{ $$ = mk_stackrel(s1, s0); }

Color		= "color" - s0:ColorGroup - s1:Simple		{ $$ = mk_color(s0, s1); }
Division	= s0:Simple - '/' - s1:Simple			{ $$ = mk_fraction(s0, s1); }
Underover	= s0:Unders - '_' - s1:Simple - '^' - s2:Simple { $$ = mk_underover(s0, s1, s2); }
Subsup		= s0:Simple - '_' - s1:Simple - '^' - s2:Simple { $$ = mk_subsup(s0, s1, s2); }
Ubrace		= "ubrace" - s0:Simple - '_' - s1:Simple	{ $$ = mk_ubrace(s0, s1); }
Obrace		= "obrace" - s0:Simple - '^' - s1:Simple	{ $$ = mk_obrace(s0, s1); }

Under		= s0:Unders - '_' - s1:Simple		{ $$ = mk_under(s0, s1); }
Sub		= s0:Simple - '_' - s1:Simple		{ $$ = mk_sub(s0, s1); }
Super		= s0:Simple - '^' - s1:Simple		{ $$ = mk_sup(s0, s1); }

Font		= "bbb" - t0:Simple			{ font($$, "double-struck", t0); }
		| "bb" - t0:Simple			{ font($$, "bold", t0); }
		| "cc" - t0:Simple			{ font($$, "script", t0); }
		| "tt" - t0:Simple			{ font($$, "monospace", t0); }
		| "fr" - t0:Simple			{ font($$, "fraktur", t0); }
		| "sf" - t0:Simple			{ font($$, "sans-serif", t0); }

Left 		= "{:"		{ $$ = mk_node(NODE_RAW, ""); }
		| "(:"		{ $$ = mk_node(NODE_RAW, "&lang;"); }
		| "<<"		{ $$ = mk_node(NODE_RAW, "&lang;"); }
		| "("		{ $$ = mk_node(NODE_RAW, "("); }
		| "["		{ $$ = mk_node(NODE_RAW, "["); }
		| "{"		{ $$ = mk_node(NODE_RAW, LCURLY); }

Right 		= ":}"		{ $$ = mk_node(NODE_RAW, ""); }
		| ":)"		{ $$ = mk_node(NODE_RAW, "&rang;"); }
		| ">>"		{ $$ = mk_node(NODE_RAW, "&rang;"); }
		| ")"		{ $$ = mk_node(NODE_RAW, ")"); }
		| "]"		{ $$ = mk_node(NODE_RAW, "]"); }
		| "}"		{ $$ = mk_node(NODE_RAW, RCURLY); }

Operation	= "+"		{ $$ = mk_op("+"); }
		| "!"		{ $$ = mk_op("!"); }
		| "-"		{ $$ = mk_op("&minus;"); }
		| "*"		{ $$ = mk_op("&sdot;"); }
		| "**"		{ $$ = mk_op("&sstarf;"); }
		| "//"		{ $$ = mk_op("/"); }
		| "\\\\"	{ $$ = mk_op("\\"); }
		| "xx"		{ $$ = mk_op("&times;"); }
		| "-:"		{ $$ = mk_op("&divide;"); }
		| "@"		{ $$ = mk_op("&compfn;"); }
		| "o+"		{ $$ = mk_op("&oplus;"); }
		| "ox"		{ $$ = mk_op("&otimes;"); }
		| "o."		{ $$ = mk_op("&odot;"); }
		| "^^"		{ $$ = mk_op("&wedge;"); }
		| "vv"		{ $$ = mk_op("&vee;"); }
		| "nn"		{ $$ = mk_op("&cap;"); }
		| "uu"		{ $$ = mk_op("&cup;"); }

Unders		= "sum"		{ $$ = mk_op("&Sigma;"); }
		| "prod"	{ $$ = mk_op("&Pi;"); }
		| "^^^"		{ $$ = mk_op("&Wedge;"); }
		| "vvv"		{ $$ = mk_op("&Vee;"); }
		| "nnn"		{ $$ = mk_op("&Intersection;"); }
		| "uuu"		{ $$ = mk_op("&Union;"); }
		| "lim"		{ $$ = mk_op("lim"); }
		| "Lim"		{ $$ = mk_op("Lim"); }
		| "min"		{ $$ = mk_op("min"); }
		| "max"		{ $$ = mk_op("max"); }

Relation	= "="		{ $$ = mk_op("="); }
		| "!="		{ $$ = mk_op("&NotEqual;"); }
		| ":="		{ $$ = mk_op("&Assign;"); }
		| "<="		{ $$ = mk_op("&leq;"); }
		| "<"		{ $$ = mk_op("&lt;"); }
		| ">="		{ $$ = mk_op("&geq;"); }
		| ">"		{ $$ = mk_op("&gt;"); }
		| "-<"		{ $$ = mk_op("&Precedes;"); }
		| ">-"		{ $$ = mk_op("&Succeeds;"); }
		| "in"		{ $$ = mk_op("&in;"); }
		| "!in"		{ $$ = mk_op("&notin;"); }
		| "sub"		{ $$ = mk_op("&sub;"); }
		| "sup"		{ $$ = mk_op("&sup;"); }
		| "sube"	{ $$ = mk_op("&sube;"); }
		| "supe"	{ $$ = mk_op("&supe;"); }
		| "-="		{ $$ = mk_op("&Congruent;"); }
		| "~="		{ $$ = mk_op("&backcong;"); }
		| "~~"		{ $$ = mk_op("&approx;"); }
		| "prop"	{ $$ = mk_op("&prop;"); }

Logic 		= "and"		{ $$ = mk_op("and"); }
		| "or"		{ $$ = mk_op("or"); }
		| "not"		{ $$ = mk_op("&not;"); }
		| "=>"		{ $$ = mk_op("&Implies;"); }
		| "if"		{ $$ = mk_op("if"); }
		| "<=>"		{ $$ = mk_op("&iff;"); }
		| "AA"		{ $$ = mk_op("&ForAll;"); }
		| "EE"		{ $$ = mk_op("&Exists;"); }
		| "_|_"		{ $$ = mk_op("&UpTee;"); }
		| "TT"		{ $$ = mk_op("&DownTee;"); }
		| "|--"		{ $$ = mk_op("&RightTee;"); }
		| "|=="		{ $$ = mk_op("&DoubleRightTee;"); }

Misc		= "int"		{ $$ = mk_op("&int;"); }
	        | "oint"	{ $$ = mk_op("&oint;"); }
	        | "del"		{ $$ = mk_op("&part;"); }
	        | "grad"	{ $$ = mk_op("&nabla;"); }
	        | "+-"		{ $$ = mk_op("&pm;"); }
	        | "O/"		{ $$ = mk_op("&empty;"); }
	        | "oo"		{ $$ = mk_op("&infin;"); }
	        | "aleph"	{ $$ = mk_op("&aleph;"); }
	        | "/_"		{ $$ = mk_op("&angle;"); }
	        | ":."		{ $$ = mk_op("&therefore;"); }
	        | "|...|"	{ $$ = mk_op("|&hellip;|"); }
	        | "|cdots|"	{ $$ = mk_op("|&ctdot;"); }
	        | "vdots"	{ $$ = mk_op("&vellip;"); }
	        | "ddots"	{ $$ = mk_op("&dtdot;"); }
	        | "|\\ |"	{ $$ = mk_op("|&nbsp;|"); }
	        | "|quad|"	{ $$ = mk_op("|&nbsp;&nbsp);|"); }
	        | "diamond"	{ $$ = mk_op("&diamond;"); }
	        | "square"	{ $$ = mk_op("&square;"); }
	        | "|__"		{ $$ = mk_op("&lfloor;"); }
	        | "__|"		{ $$ = mk_op("&rfloor;"); }
	        | "|~"		{ $$ = mk_op("&lceil;"); }
	        | "~|"		{ $$ = mk_op("&rceil;"); }
	        | "CC"		{ $$ = mk_op("&Copf;"); }
	        | "NN"		{ $$ = mk_op("&Nopf;"); }
	        | "QQ"		{ $$ = mk_op("&Qopf;"); }
	        | "RR"		{ $$ = mk_op("&Ropf;"); }
	        | "ZZ"		{ $$ = mk_op("&Zopf;"); }

Accent		= "hat"		{ $$ = mk_node(NODE_RAW, "^"); }
		| "bar"		{ $$ = mk_node(NODE_RAW, "&macr;"); }
		| "ul"		{ $$ = mk_node(NODE_RAW, "_"); }
		| "vec"		{ $$ = mk_node(NODE_RAW, "&rarr;"); }
		| "dot"		{ $$ = mk_node(NODE_RAW, "."); }
		| "ddot"	{ $$ = mk_node(NODE_RAW, ".."); }

Arrow		= "uarr"	{ $$ = mk_op("&uarr;"); }
		| "darr"	{ $$ = mk_op("&darr;"); }
		| "rarr"	{ $$ = mk_op("&rarr;"); }
		| "->"		{ $$ = mk_op("&rarr;"); }
		| "|->"		{ $$ = mk_op("&map;"); }
		| "larr"	{ $$ = mk_op("&larr;"); }
		| "harr"	{ $$ = mk_op("&harr;"); }
		| "rArr"	{ $$ = mk_op("&rArr;"); }
		| "lArr"	{ $$ = mk_op("&lArr;"); }
		| "hArr"	{ $$ = mk_op("&hArr;"); }
		| ">->"		{ $$ = mk_op("&rarrtl;"); }
		| "->>"		{ $$ = mk_op("&Rarr;"); }
		| ">->>"	{ $$ = mk_op("&Rarrtl;"); }

SPECIAL		= "dx"
		| "dy"
		| "dz"
		| "dt"
		| "f"
		| "g"

GREEK		= "alpha"
		| "beta"
		| "chi"
		| "delta"
		| "Delta"
		| "epsi"
		| "varepsilon"
		| "eta"
		| "gamma"
		| "Gamma"
		| "iota"
		| "kappa"
		| "lambda"
		| "Lambda"
		| "lamda"
		| "Lamda"
		| "mu"
		| "nu"
		| "omega"
		| "Omega"
		| "phi"
		| "varphi"
		| "Phi"
		| "pi"
		| "Pi"
		| "psi"
		| "Psi"
		| "rho"
		| "sigma"
		| "Sigma"
		| "tau"
		| "theta"
		| "varthetaut"
		| "Theta"
		| "upsilon"
		| "xi"
		| "Xi"
		| "zeta"

STANDARD	= "sin"
		| "cos"
		| "tan"
		| "sinh"
		| "cosh"
		| "tanh"
		| "cot"
		| "sec"
		| "csc"
		| "log"
		| "ln"
		| "det"
		| "dim"
		| "mod"
		| "gcd"
		| "lcm"
		| "lub"
		| "glb"

IDENTIFIER	= [a-zA-Z]
NUMBER		= '-'? [0-9]+ ('.' [0-9]+)?
-		= [ \t]*
EOF		= "\n" | !.
